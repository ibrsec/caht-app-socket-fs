{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "chat-app",
    "description": "",
    "termsOfService": "https://www.ibrsec.com",
    "license": {
      "name": "ISC"
    },
    "contact": {
      "name": "",
      "email": "ibr.seckin@gmail.com"
    }
  },
  "host": "chat-app-socket-fs.onrender.com",
  "basePath": "/api",
  "schemes": [
    "https",
    "http"
  ],
  "securityDefinitions": {
    "Token": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": " Simple token authentication *  example: <b>Token ...tokenkey...</b>"
    },
    "Bearer": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Jwt token authentication *  example : <b>Bearer ...jwt tokenkey...</b>"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register",
        "description": "  Login with username/email and password!</br></br>  <b>Permission= No Permission</b></br></br>  - Password type Rules- [lenght:8-16, at least: 1 upper, 1 lower, 1 number, 1 special[@$!%*?&]]</br>  - Email type Rules- --@--.--</br>  - Required fields: - fullName, username, email, password, confirmedPassword, gender</br>  - Gender is enum: - male, - female</br>  - if user sends a image with upload it returns, else a random pic returns</br>   ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "fullName": {
                  "type": "string",
                  "example": "full name"
                },
                "username": {
                  "type": "string",
                  "example": "username"
                },
                "email": {
                  "type": "string",
                  "example": "email@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1*"
                },
                "confirmedPassword": {
                  "type": "string",
                  "example": "Password1*"
                },
                "gender": {
                  "type": "string",
                  "example": "male"
                }
              },
              "required": [
                "fullName",
                "username",
                "email",
                "password",
                "confirmedPassword",
                "gender"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "A new user is created!"
                },
                "token": {
                  "type": "string",
                  "example": "tokenkey"
                },
                "bearer": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "access token"
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "refresh token"
                    }
                  }
                },
                "user": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request </br>  - All fields are required!</br>  - Password and Confirmed password is not same</br>  "
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "description": "  Login with username/email and password!</br></br>  <b>Permission= No Permission</b></br></br>  - Password type Rules- [lenght:8-16, at least: 1 upper, 1 lower, 1 number, 1 special[@$!%*?&]]</br>  - Email type Rules- --@--.--</br>  - Required fields: - username or email,password</br>  ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "username"
                },
                "email": {
                  "type": "string",
                  "example": "email@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1*"
                }
              },
              "required": [
                "username",
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Logined!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Login is OK!"
                },
                "bearer": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "access token"
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "refresh token"
                    }
                  }
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "66362c828c9af95390f5aae5"
                    },
                    "fullName": {
                      "type": "string",
                      "example": "full name"
                    },
                    "username": {
                      "type": "string",
                      "example": "testba"
                    },
                    "profilePic": {
                      "type": "string",
                      "example": "http://examplepic"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - email or username and password fields are required!"
          },
          "401": {
            "description": "Unauthorized:    </br>- User not found!   </br>- Invalid password!   "
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh token",
        "description": "   Refresh the access token with refresh token!</br></br>   <b>Permission= No Permission</b></br></br>   - Required fields: - bearer. refresh Token</br>  ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "bearer": {
                  "type": "object",
                  "properties": {
                    "refresh Token": {
                      "type": "string",
                      "example": "...refresh token"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Access token is  !!"
                },
                "result": {
                  "type": "object",
                  "properties": {
                    "bearer": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "access token"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - bearer.refreshToken is a required field!"
          },
          "401": {
            "description": "Unauthorized:   </br>- Unauhtorized - Invalid signature - invalid token or token is expired!!   </br>- Unauhtorized - Your account is not active - please contact with support!!!   </br>- User not found!   </br>- Invalid password!   "
          }
        }
      }
    },
    "/api/auth/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "    <b>Permission= No Permission</b></br></br>  ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Logged out!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Logout is OK!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/messages/send/{id}": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send message",
        "description": "  Send a Message to another user</br></br>  <b>Permission= Loginned user</b></br></br>  - user who will recieve the message should be as parameter</br>     ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "example message"
                }
              },
              "required": [
                "message"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "A new message is sended!"
                },
                "newMessage": {
                  "$ref": "#/definitions/Message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request </br>  - Message filed is requried!</br>  - Type of recieverId,recieverId is invalid(Should be ObjectId)!</br>  - Sender or Reciever is not exist in users!</br>  "
          }
        }
      }
    },
    "/api/messages/{id}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get messages",
        "description": "  Get a Messages between users</br></br>  <b>Permission= Loginned user</b></br></br>  - Opposite user is on param id</br>     ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully listed!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Messages are listed"
                },
                "messages": {
                  "$ref": "#/definitions/Message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request </br>   - Type of recieverId,recieverId is invalid(Should be ObjectId)!</br>  - Sender or Reciever is not exist in users!</br>  "
          }
        }
      }
    },
    "/api/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List Users",
        "description": "  List all users except who asks!</br></br>  <b>Permission= Loginned user</b></br>   You can send query with endpoint for filter[],search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/conversations/": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "Get conversations",
        "description": "  Get conversations </br></br>  <b>Permission= Loginned user</b></br></br>      ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully listed!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Conversations are listed"
                },
                "conversations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Conversation"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request </br>   - Type of recieverId is invalid(Should be ObjectId)!</br>  - Sender is not exist in users!</br>  "
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "fullName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "username": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Invalid email type, type: __@__.__"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "minLength": {
              "type": "number",
              "example": 6
            },
            "set": {
              "type": "function"
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Invalid password type Rules- [lenght:8-16, at least: 1 upper, 1 lower, 1 number, 1 special[@$!%*?&]]"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "gender": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "enum": {
              "type": "array",
              "example": [
                "male",
                "female"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "profilePic": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "string",
              "example": ""
            }
          }
        },
        "isAdmin": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "senderId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "ref": {
              "type": "string",
              "example": "User"
            }
          }
        },
        "recieverId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "ref": {
              "type": "string",
              "example": "User"
            }
          }
        },
        "message": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Conversation": {
      "type": "object",
      "properties": {
        "participants": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "User"
              }
            }
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "Message"
              },
              "default": {
                "type": "array",
                "example": [],
                "items": {}
              }
            }
          }
        },
        "newMessage": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Token": []
    },
    {
      "Bearer": []
    }
  ]
}